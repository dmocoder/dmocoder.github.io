I"‰<p>Rust piqued my interest back in 2018 when I learnt that it didnâ€™t support nulls. I realise now of course that lots of languages donâ€™t support nulls such as Haskell and Swift, but at the time I was using libraries that added discriminated unions and option types to C#. I was trying my best to avoid checking for nulls throughout my code so the thought of having this baked into the language sounded very appealing.</p>

<p>Then I learned that Rust was memory safe but had no garbage collector! Again something achieved in other languages but needless to say I was intrigued how a language could do all these things and still be fast.</p>

<h3 id="the-rust-programming-language">The Rust Programming Language</h3>

<p><a href="https://doc.rust-lang.org/book">The book</a> is an excellent guide to Rust. I worked through it from cover to cover over Christmas 2019 and have forgotten almost all of it. Thatâ€™s no slight on the book - its fantastic - Its just that I havenâ€™t written any Rust code since January.</p>

<p>Itâ€™s not that hard to start learning a new programming language but if you arenâ€™t using it regularly then it just wonâ€™t stick. This blog is largely an exercise in learning and coding Rust to do just that - make it stick.</p>

<h3 id="why-bother">Why Bother?</h3>

<p>Rust has a lot of potential, largely due to its inherent safety. It is frequently touted as a replacement primarily for C++ as well as C and is now being used by the likes of Microsoft and Amazon for systems programming. As someone who has never had to do much C++ coding outside of some weird windows libraries Iâ€™m more interested in its modern syntax and its speed.</p>
:ET